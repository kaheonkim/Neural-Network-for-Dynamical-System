# -*- coding: utf-8 -*-
"""Data_Generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18GrSI-JhXn1ZKiwMyU0lDHG-9J6PuACH
"""

import numpy as np
import pandas as pd

from scipy.integrate import odeint
import torch
import torch.nn as nn
import matplotlib.pyplot as plt

class Linear_Dynamics_3D():
  def __init__(self):
    self.A = np.array([[0,-1,0],[1,0,0],[0,0,2]])
    self.t = np.linspace(0,10,10000)
    self.init = [10,10,10]

    def Linear_Equation_3D(xyz, t):
      x, y, z = xyz
      X = [x,y,z]
      [dx, dy, dz] = np.matmul(self.A,X)
      return dx, dy, dz
    self.value = odeint(Linear_Equation_3D, self.init, self.t)

  def describe(self):

    ax = plt.figure().add_subplot(projection='3d')

    ax.plot(*self.value.T, lw=0.5)
    ax.set_xlabel("X Axis")
    ax.set_ylabel("Y Axis")
    ax.set_zlabel("Z Axis")
    ax.set_title("Lorenz Attractor")

    plt.show()

class Pendulum():
  def __init__(self):
    self.w = 2
    self.t = np.linspace(0,10,10000)
    self.init = [10,10]

    def Pendulum_Equation(xy, t):
        x, y = xy
        dx, dy = y, -self.w**2*np.sin(x)
        return dx, dy
        
    self.value = odeint(Pendulum_Equation, self.init, self.t)

  def describe(self):

    plt.plot(*self.value.T, lw=0.5)
    plt.xlabel("X Axis")
    plt.ylabel("Y Axis")
    plt.title("Pendulum Attractor")

    plt.show()

class Simple_Harmonic():
  def __init__(self):
    self.w = 2
    self.t = np.linspace(0,10,500)
    self.init = [10,10]

    def Simple_Harmonic_Equation(xy, t):
        x, y = xy
        dx, dy = y, -self.w**2*x
        return dx, dy
        
    self.value = odeint(Simple_Harmonic_Equation, self.init, self.t)

  def describe(self):

    plt.plot(*self.value.T, lw=0.5)
    plt.xlabel("X Axis")
    plt.ylabel("Y Axis")
    plt.title("Simple_Harmonic_Motion")

    plt.show()

class Lorenz_System():
  def __init__(self):
    self.rho = 45.92
    self.sigma = 16.0
    self.beta = 8.0 / 2.0
    self.t = np.linspace(0,200,10000)
    self.init = [0, 1, 1.05]

    def lorenz_equation(xyz,t):
      x, y, z = xyz  
      dx = self.sigma*(y - x)
      dy = self.rho*x - y - x*z
      dz = x*y - self.beta*z
      return dx, dy, dz
        
    self.value = odeint(lorenz_equation, self.init, self.t)

  def describe(self):

    ax = plt.figure().add_subplot(projection='3d')

    ax.plot(*self.value.T, lw=0.5)
    ax.set_xlabel("X Axis")
    ax.set_ylabel("Y Axis")
    ax.set_zlabel("Z Axis")
    ax.set_title("Lorenz Attractor")

    plt.show()