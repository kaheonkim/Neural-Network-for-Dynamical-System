# -*- coding: utf-8 -*-
"""dynamics_generator_2d.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dwGIZivr0LVYwypWimffuvHYlKmaeh2a
"""

import numpy as np
import pandas as pd
import random
from scipy.integrate import odeint
import matplotlib.pyplot as plt

class FN_system():
  def __init__(self, param, t, init, noise=None):
    I, eps, alpha, beta = param
    def FN_equation(xy,t):
      v,w = xy
      dv = I + v -v **3/3-w
      dw = eps*(v-alpha*w+beta)
      return dv, dw

    self.value = odeint(FN_equation, init, t)
    if noise == 'Gaussian':
      self.value = odeint(FN_equation, init, t) + np.random.normal(0,1e-5,np.shape(self.value))
    elif noise == None:
      self.value = self.value


  def describe(self):

    plt.plot(*self.value.T[0] ,*self.value.T[1], lw=0.5)
    ax.set_xlabel("X Axis")
    ax.set_ylabel("Y Axis")
    ax.set_title("FitzHugh-Nagumo Model")

    plt.show()

class Linear_Dynamics_2D(): #Label #1
  def __init__(self, A, t, init, noise=None):

    def Linear_Equation_2D(xy, t):
      x, y = xy
      X = [x,y]
      [dx, dy] = np.matmul(A,X)
      return dx, dy

    self.value = odeint(Linear_Equation_2D, init, t)
    if noise == 'Gaussian':
      self.value = odeint(Linear_Equation_2D, init, t) + np.random.normal(0, 1e-5,np.shape(self.value))
    elif noise == None:
      self.value = self.value
  def describe(self):
    plt.plot(*self.value.T[0] ,*self.value.T[1], lw=0.5)
    ax.set_xlabel("X Axis")
    ax.set_ylabel("Y Axis")
    ax.set_title("Linear Dynamics 3D")

    plt.show()

class LV_system():
  def __init__(self, param, t, init, noise=None):
    alpha, beta, gamma, delta = param
    def LV_equation(xy,t):
      x, y = xy
      dx = x*(alpha-beta*y)
      dy = y*(gamma*x-delta)
      return dx, dy

    self.value = odeint(LV_equation, init, t)
    if noise == 'Gaussian':
      self.value = odeint(LV_equation, init, t) + np.random.normal(0,1e-5,np.shape(self.value))
    elif noise == None:
      self.value = self.value


  def describe(self):
    plt.plot(*self.value.T[0] ,*self.value.T[1], lw=0.5)
    plt.set_xlabel("X Axis")
    plt.set_ylabel("Y Axis")
    plt.set_title("Linear Dynamics 3D")

    plt.show()


class DF_system():
  def __init__(self, param, t, init, noise=None):
    alpha, beta, delta = param
    def DF_equation(xy,t):
      x, y = xy
      dx = y
      dy = -delta*y+alpha*x-beta*x**3
      return dx, dy

    self.value = odeint(DF_equation, init, t)
    if noise == 'Gaussian':
      self.value = odeint(DF_equation, init, t) + np.random.normal(0,1e-5,np.shape(self.value))
    elif noise == None:
      self.value = self.value



  def describe(self):
    plt.plot(*self.value.T[0] ,*self.value.T[1], lw=0.5)
    ax.set_xlabel("X Axis")
    ax.set_ylabel("Y Axis")
    ax.set_title("Linear Dynamics 3D")

    plt.show()


def generate_Linear(N = 100, noise = 'Gaussian'):
  Linear_param = []
  for i in range(N):
    Linear_param_set = {}
    gen_A = []
    for j in range(2):
      gen_A.append([random.uniform(-5,5), random.uniform(-5,5)])
    gen_init = [random.uniform(-1,1),random.uniform(-1,1)]
    gen_t = np.linspace(0,random.uniform(1,2), 1001)
    gen_t = random.sample(list(gen_t), random.randint(250,1000))
    gen_t = np.sort(gen_t)
    Linear_param_set['A'], Linear_param_set['init'], Linear_param_set['t'] = gen_A, gen_init, gen_t
    Linear_param.append(Linear_param_set)

  gen_series_set = []
  for param in Linear_param:
    gen_series = Linear_Dynamics_2D(A = param['A'], init = param['init'], 
                                    t = param['t'], noise = noise)
    gen_series_set.append([gen_series.value, param['t'], 0])

  return gen_series_set

def generate_FN(N = 100, noise = 'Gaussian'):
  FN_param = []
  for i in range(N):
    FN_param_set = {}
    gen_FN_param = [random.randint(1,10), random.uniform(0,0.8), random.uniform(0.5,5), random.uniform(0.5,5)]
    gen_init = [random.uniform(0,1),random.uniform(0,1)]
    gen_t = np.linspace(0,random.uniform(1,2), 1001)
    gen_t = random.sample(list(gen_t), random.randint(250,1000))
    gen_t = np.sort(gen_t)
    FN_param_set['FN_param'] = gen_FN_param
    FN_param_set['init'] = gen_init
    FN_param_set['t'] = gen_t
    FN_param.append(FN_param_set)

  gen_series_set = []
  for param in FN_param:
    gen_series = FN_system(param = param['FN_param'], init = param['init'],
                               t = param['t'], noise = noise)
    gen_series_set.append([gen_series.value, param['t'], 1])
  return gen_series_set

def generate_LV(N = 100, noise = 'Gaussian'):
  LV_param = []
  for i in range(N):
    LV_param_set = {}
    gen_LV_param = [random.uniform(0,10), random.uniform(0,10), random.uniform(0,10),random.uniform(0,10)]
    gen_init = [random.uniform(-1,1),random.uniform(-1,1)]
    gen_t = np.linspace(0,random.uniform(1,2), 1001)
    gen_t = random.sample(list(gen_t), random.randint(250,1000))
    gen_t = np.sort(gen_t)
    LV_param_set['LV_param'] = gen_LV_param
    LV_param_set['init'] = gen_init
    LV_param_set['t'] = gen_t
    LV_param.append(LV_param_set)

  gen_series_set = []
  for param in LV_param:
    gen_series = LV_system(param = param['LV_param'], init = param['init'],
                               t = param['t'], noise = noise)
    gen_series_set.append([gen_series.value, param['t'], 2])
  return gen_series_set


def generate_DF(N = 100, noise = None):
  DF_param = []
  for i in range(N):
    DF_param_set = {}
    gen_DF_param = [random.uniform(1e-3,1e-1), random.uniform(1e-3,1e-1), random.uniform(1e-3,1e-1)]
    gen_init = [random.uniform(0,1),random.uniform(0,1)]
    gen_t = np.linspace(0,random.uniform(1,2), 1001)
    gen_t = random.sample(list(gen_t), random.randint(250,1000))
    gen_t = np.sort(gen_t)
    DF_param_set['param'] = gen_DF_param
    DF_param_set['init'] = gen_init
    DF_param_set['t'] = gen_t
    DF_param.append(DF_param_set)

  gen_series_set = []
  for param in DF_param:
    gen_series = DF_system(param = param['param'], init = param['init'],
                               t = param['t'], noise = noise)
    gen_series_set.append([gen_series.value,param['t'], 3])
  return gen_series_set