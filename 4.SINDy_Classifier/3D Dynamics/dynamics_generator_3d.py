# -*- coding: utf-8 -*-
"""dynamics_generator_2d.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dwGIZivr0LVYwypWimffuvHYlKmaeh2a
"""

import numpy as np
import pandas as pd
import random
from scipy.integrate import odeint
import matplotlib.pyplot as plt

class SIR_model():
  def __init__(self, param, t, init, noise=None):
    N, beta, gamma = param
    def SIR_equation(xyz,t):
      S, I, R = xyz  
      dS = -beta/N * S * I
      dI = beta * S * I / N - gamma * I
      dR = gamma * I
      return dS, dI, dR

    self.value = odeint(SIR_equation, init, t)
    if noise == 'Gaussian':
      self.value = odeint(SIR_equation, init, t) + np.random.normal(0,1e-5,np.shape(self.value))
    elif noise == None:
      self.value = self.value


  def describe(self):

    ax = plt.figure().add_subplot(projection='3d')

    ax.plot(*self.value.T, lw=0.5)
    ax.set_xlabel("X Axis")
    ax.set_ylabel("Y Axis")
    ax.set_zlabel("Z Axis")
    ax.set_title("SIR Model")

    plt.show()

class Linear_Dynamics_3D(): #Label #1
  def __init__(self, A, t, init, noise=None):

    def Linear_Equation_3D(xyz, t):
      x, y, z = xyz
      X = [x,y,z]
      [dx, dy, dz] = np.matmul(A,X)
      return dx, dy, dz

    self.value = odeint(Linear_Equation_3D, init, t)
    if noise == 'Gaussian':
      self.value = odeint(Linear_Equation_3D, init, t) + np.random.normal(0, 1e-5,np.shape(self.value))
    elif noise == None:
      self.value = self.value
  def describe(self):

    ax = plt.figure().add_subplot(projection='3d')

    ax.plot(*self.value.T, lw=0.5)
    ax.set_xlabel("X Axis")
    ax.set_ylabel("Y Axis")
    ax.set_zlabel("Z Axis")
    ax.set_title("Linear Dynamics 3D")

    plt.show()

class Lorenz_System():
  def __init__(self, param, t, init, noise=None):
    rho, sigma, beta = param
    def lorenz_equation(xyz,t):
      x, y, z = xyz  
      dx = sigma*(y - x)
      dy = rho*x - x*z - y
      dz = x*y - beta*z
      return dx, dy, dz

    self.value = odeint(lorenz_equation, init, t)
    if noise == 'Gaussian':
      self.value = odeint(lorenz_equation, init, t) + np.random.normal(0,1e-5,np.shape(self.value))
    elif noise == None:
      self.value = self.value


  def describe(self):

    ax = plt.figure().add_subplot(projection='3d')

    ax.plot(self.value.T[0],self.value.T[1],self.value.T[2], lw=0.5)
    ax.set_xlabel("X Axis")
    ax.set_ylabel("Y Axis")
    ax.set_zlabel("Z Axis")
    ax.set_title("Lorenz Attractor")

    plt.show()


class BZ_System():
  def __init__(self, param, t, init, noise=None):
    q, eps, delta = param
    def BZ_equation(xyz,t):
      x, y, z = xyz  
      dx = (q * y - x * y + x * (1 - x))/eps
      dy = (-q * y - x * y + z)/delta
      dz = x - z
      return dx, dy, dz

    self.value = odeint(BZ_equation, init, t)
    if noise == 'Gaussian':
      self.value = odeint(BZ_equation, init, t) + np.random.normal(0,1e-5,np.shape(self.value))
    elif noise == None:
      self.value = self.value


  def describe(self):

    ax = plt.figure().add_subplot(projection='3d')

    ax.plot(*self.value[0],self.value[1],self.value[2], lw=0.5)
    ax.set_xlabel("X Axis")
    ax.set_ylabel("Y Axis")
    ax.set_zlabel("Z Axis")
    ax.set_title("Lorenz Attractor")

    plt.show()

def generate_Linear(N = 100, noise = 'Gaussian'):
  Linear_param = []
  for i in range(N):
    Linear_param_set = {}
    gen_A = []
    for j in range(3):
      gen_A.append([random.uniform(-5,5), random.uniform(-5,5), random.uniform(-5,5)])
    gen_init = [random.uniform(-1,1),random.uniform(-1,1),random.uniform(-1,1)]
    gen_t = np.linspace(0,random.uniform(1,2), 1001)
    gen_t = random.sample(list(gen_t), random.randint(250,1000))
    gen_t = np.sort(gen_t)
    Linear_param_set['A'], Linear_param_set['init'], Linear_param_set['t'] = gen_A, gen_init, gen_t
    Linear_param.append(Linear_param_set)

  gen_series_set = []
  for param in Linear_param:
    gen_series = Linear_Dynamics_3D(A = param['A'], init = param['init'], 
                                    t = param['t'], noise = noise)
    gen_series_set.append([gen_series.value, param['t'], 0])

  return gen_series_set

def generate_SIR(N = 100, noise = 'Gaussian'):
  SIR_param = []
  for i in range(N):
    SIR_param_set = {}
    gen_SIR_param = [random.uniform(0,1), random.uniform(0,1), random.uniform(0,1)]
    gen_init = [random.uniform(0,1),random.uniform(0,1),random.uniform(0,1)]
    gen_t = np.linspace(0,random.uniform(1,2), 1001)
    gen_t = random.sample(list(gen_t), random.randint(250,1000))
    gen_t = np.sort(gen_t)
    SIR_param_set['SIR_param'] = gen_SIR_param
    SIR_param_set['init'] = gen_init
    SIR_param_set['t'] = gen_t
    SIR_param.append(SIR_param_set)

  gen_series_set = []
  for param in SIR_param:
    gen_series = SIR_model(param = param['SIR_param'], init = param['init'],
                               t = param['t'], noise = noise)
    gen_series_set.append([gen_series.value, param['t'], 1])
  return gen_series_set

def generate_Lorenz(N = 100, noise = 'Gaussian'):
  Lorenz_param = []
  for i in range(N):
    Lorenz_param_set = {}
    gen_Lorenz_param = [random.uniform(0,10), random.uniform(0,10), random.uniform(0,10)]
    gen_init = [random.uniform(-1,1),random.uniform(-1,1),random.uniform(-1,1)]
    gen_t = np.linspace(0,random.uniform(1,2), 1001)
    gen_t = random.sample(list(gen_t), random.randint(250,1000))
    gen_t = np.sort(gen_t)
    Lorenz_param_set['Lorenz_param'] = gen_Lorenz_param
    Lorenz_param_set['init'] = gen_init
    Lorenz_param_set['t'] = gen_t
    Lorenz_param.append(Lorenz_param_set)

  gen_series_set = []
  for param in Lorenz_param:
    gen_series = Lorenz_System(param = param['Lorenz_param'], init = param['init'],
                               t = param['t'], noise = noise)
    gen_series_set.append([gen_series.value, param['t'], 2])
  return gen_series_set


def generate_BZ(N = 100, noise = None):
  BZ_param = []
  for i in range(N):
    BZ_param_set = {}
    gen_BZ_param = [random.uniform(1e-3,1e-1), random.uniform(1e-3,1e-1), random.uniform(1e-3,1e-1)]
    gen_init = [random.uniform(0,1),random.uniform(0,1),random.uniform(0,1)]
    gen_t = np.linspace(0,random.uniform(1,2), 1001)
    gen_t = random.sample(list(gen_t), random.randint(250,1000))
    gen_t = np.sort(gen_t)
    BZ_param_set['param'] = gen_BZ_param
    BZ_param_set['init'] = gen_init
    BZ_param_set['t'] = gen_t
    BZ_param.append(BZ_param_set)

  gen_series_set = []
  for param in BZ_param:
    gen_series = BZ_System(param = param['param'], init = param['init'],
                               t = param['t'], noise = noise)
    gen_series_set.append([gen_series.value,param['t'], 3])
  return gen_series_set